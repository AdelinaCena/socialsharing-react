{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { createRef, useState, Component } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport { addMediaToStore } from '../store/actions/MediaAction';\n\nclass MyUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUploadParams = ({\n      meta\n    }) => {\n      this.setState({\n        media: meta\n      });\n      console.log(this.state.media);\n      return {\n        url: 'https://httpbin.org/post'\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status) => {};\n\n    this.handleSubmit = (e, files, allFiles) => {\n      e.preventDefault(); // allFiles.forEach(f => f.remove())\n\n      this.props.addMediaToStore(this.state);\n      console.log(this.state);\n    };\n\n    this.state = {\n      media: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e) {\n    let files = e.target.files || e.dataTransfer.files;\n    if (!files.length) return;\n    this.createImage(files[0]);\n  }\n\n  createImage(file) {\n    let reader = new FileReader();\n\n    reader.onload = e => {\n      this.setState({\n        image: e.target.result\n      });\n    };\n\n    reader.readAsDataURL(file);\n  } // specify upload params and url for your files\n\n\n  render() {\n    const {\n      media\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: this.getUploadParams,\n      onChangeStatus: this.handleChangeStatus,\n      onSubmit: this.handleSubmit,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 4\n      }\n    }), media);\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => dispatch(addMediaToStore(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","createRef","useState","Component","Dropzone","connect","addMediaToStore","MyUploader","constructor","props","getUploadParams","meta","setState","media","console","log","state","url","handleChangeStatus","file","status","handleSubmit","e","files","allFiles","preventDefault","bind","onChange","target","dataTransfer","length","createImage","reader","FileReader","onload","image","result","readAsDataURL","render","mapStatesToProps","post","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef, useState, Component } from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport { addMediaToStore } from '../store/actions/MediaAction'\r\n\r\n\r\n class MyUploader extends Component {\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\t\tthis.state = {\r\n\t\t\t\tmedia:[]\r\n\t\t\t}\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this)\r\n        this.onChange = this.onChange.bind(this);\r\n\r\n\t}\r\n\tonChange(e) {\r\n\t\tlet files = e.target.files || e.dataTransfer.files;\r\n\t\tif (!files.length)\r\n\t\treturn;\r\n\t\tthis.createImage(files[0]);\r\n\t\t}\r\n\t\tcreateImage(file) {\r\n\t\tlet reader = new FileReader();\r\n\t\treader.onload = (e) => {\r\n\t\tthis.setState({\r\n\t\timage: e.target.result\r\n\t\t})\r\n\t\t};\r\n\t\treader.readAsDataURL(file);\r\n\t}\r\n\t// specify upload params and url for your files\r\n\t\tgetUploadParams = ({ meta }) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tmedia : meta\r\n\t\t\t});\r\n\t\t\tconsole.log(this.state.media)\r\n\t\t\treturn { url: 'https://httpbin.org/post' } \r\n\t\t}\r\n\t\r\n\t// called every time a file's `status` changes\r\n\thandleChangeStatus = ({ meta, file }, status) => { \r\n\t}\r\n\t\r\n\t// receives array of files that are done uploading when submit button is clicked\r\n\thandleSubmit = (e, files, allFiles) => {\r\n\t\te.preventDefault();\r\n\t\t// allFiles.forEach(f => f.remove())\r\n\t\tthis.props.addMediaToStore(this.state)\r\n\t\tconsole.log(this.state)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { media } = this.props;\r\n\t\treturn (\r\n\t\t\t<div> \r\n\t\t\t<Dropzone\r\n\t\t\t\tgetUploadParams={this.getUploadParams}\r\n\t\t\t\tonChangeStatus={this.handleChangeStatus}\r\n\t\t\t\tonSubmit={this.handleSubmit}\r\n\t\t\t\taccept=\"image/*,audio/*,video/*\"\r\n\t\t\t/>\r\n\t\t\t   \r\n\t\t\t   { media }\r\n\t\t\t</div>\r\n\r\n\t\t)\r\n\r\n\t}\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n\treturn { \r\n\t\tmedia:state.post.media\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddMediaToStore:(files) => dispatch(addMediaToStore(files))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}