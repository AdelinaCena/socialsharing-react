{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { createRef, useState, Component } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport { addMediaToStore } from '../store/actions/MediaAction';\n\nclass MyUploader extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getUploadParams = ({\n      meta\n    }) => {\n      return {\n        url: 'https://httpbin.org/post'\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status, e) => {\n      e.preventDefault();\n    };\n\n    this.handleSubmit = (files, allFiles, e) => {\n      e.preventDefault(); // allFiles.forEach(f => f.remove())\n\n      addMediaToStore(files);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: this.getUploadParams,\n      onChangeStatus: this.handleChangeStatus,\n      onSubmit: this.handleSubmit,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => dispatch(addMediaToStore(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","createRef","useState","Component","Dropzone","connect","addMediaToStore","MyUploader","getUploadParams","meta","url","handleChangeStatus","file","status","e","preventDefault","handleSubmit","files","allFiles","render","mapStatesToProps","state","media","post","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAGC,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAGhCK,eAHgC,GAGd,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC5B,aAAO;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAAP;AACH,KAL+B;;AAAA,SAQlCC,kBARkC,GAQb,CAAC;AAAEF,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAD,EAAiBC,MAAjB,EAAyBC,CAAzB,KAA+B;AACjDA,MAAAA,CAAC,CAACC,cAAF;AACJ,KAVmC;;AAAA,SAalCC,YAbkC,GAanB,CAACC,KAAD,EAAQC,QAAR,EAAkBJ,CAAlB,KAAwB;AACrCA,MAAAA,CAAC,CAACC,cAAF,GADqC,CAErC;;AACAT,MAAAA,eAAe,CAACW,KAAD,CAAf;AACD,KAjBiC;AAAA;;AAmBlCE,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,QAAD;AACE,MAAA,eAAe,EAAE,KAAKX,eADxB;AAEE,MAAA,cAAc,EAAE,KAAKG,kBAFvB;AAGE,MAAA,QAAQ,EAAE,KAAKK,YAHjB;AAIE,MAAA,MAAM,EAAC,yBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AA7BiC;;AAgCpC,MAAMI,gBAAgB,GAAIC,KAAD,IAAW;AAClC,SAAO;AACLC,IAAAA,KAAK,EAACD,KAAK,CAACE,IAAN,CAAWD;AADZ,GAAP;AAGD,CAJD;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLnB,IAAAA,eAAe,EAAEW,KAAD,IAAWQ,QAAQ,CAACnB,eAAe,CAACW,KAAD,CAAhB;AAD9B,GAAP;AAGD,CAJD;;AAMA,eAAeZ,OAAO,CAACe,gBAAD,EAAmBI,kBAAnB,CAAP,CAA8CjB,UAA9C,CAAf","sourcesContent":["import React, {createRef, useState, Component } from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport { addMediaToStore } from '../store/actions/MediaAction'\r\n\r\n\r\n class MyUploader extends Component {\r\n\r\n  // specify upload params and url for your files\r\n    getUploadParams = ({ meta }) => {\r\n        return { url: 'https://httpbin.org/post' } \r\n    }\r\n  \r\n  // called every time a file's `status` changes\r\n  handleChangeStatus = ({ meta, file }, status, e) => { \r\n     e.preventDefault();\r\n}\r\n  \r\n  // receives array of files that are done uploading when submit button is clicked\r\n  handleSubmit = (files, allFiles, e) => {\r\n    e.preventDefault();\r\n    // allFiles.forEach(f => f.remove())\r\n    addMediaToStore(files)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Dropzone\r\n        getUploadParams={this.getUploadParams}\r\n        onChangeStatus={this.handleChangeStatus}\r\n        onSubmit={this.handleSubmit}\r\n        accept=\"image/*,audio/*,video/*\"\r\n      />\r\n    )\r\n\r\n  }\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n  return { \r\n    media:state.post.media\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMediaToStore:(files) => dispatch(addMediaToStore(files))\r\n  }\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}