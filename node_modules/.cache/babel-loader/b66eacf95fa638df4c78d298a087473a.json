{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { createRef, useState, Component } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport { addMediaToStore } from '../store/actions/MediaAction';\n\nclass MyUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUploadParams = ({\n      meta\n    }) => {\n      this.setState({\n        media: meta\n      });\n      console.log(this.state.media);\n      return {\n        url: 'https://httpbin.org/post'\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status) => {};\n\n    this.handleSubmit = (files, allFiles, e) => {\n      e.preventDefault(); // allFiles.forEach(f => f.remove())\n\n      addMediaToStore(files);\n    };\n\n    this.state = {\n      media: []\n    };\n  } // specify upload params and url for your files\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: this.getUploadParams,\n      onChangeStatus: this.handleChangeStatus // onSubmit={this.handleSubmit}\n      ,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 4\n      }\n    });\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => dispatch(addMediaToStore(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","createRef","useState","Component","Dropzone","connect","addMediaToStore","MyUploader","constructor","props","getUploadParams","meta","setState","media","console","log","state","url","handleChangeStatus","file","status","handleSubmit","files","allFiles","e","preventDefault","render","mapStatesToProps","post","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAGC,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AACnCK,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;;AADD,SAOCC,eAPD,GAOmB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC/B,WAAKC,QAAL,CAAc;AACbC,QAAAA,KAAK,EAAGF;AADK,OAAd;AAGAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWH,KAAvB;AACA,aAAO;AAAEI,QAAAA,GAAG,EAAE;AAAP,OAAP;AACA,KAbF;;AAAA,SAgBAC,kBAhBA,GAgBqB,CAAC;AAAEP,MAAAA,IAAF;AAAQQ,MAAAA;AAAR,KAAD,EAAiBC,MAAjB,KAA4B,CACjD,CAjBA;;AAAA,SAoBAC,YApBA,GAoBe,CAACC,KAAD,EAAQC,QAAR,EAAkBC,CAAlB,KAAwB;AACtCA,MAAAA,CAAC,CAACC,cAAF,GADsC,CAEtC;;AACAnB,MAAAA,eAAe,CAACgB,KAAD,CAAf;AACA,KAxBD;;AAEG,SAAKN,KAAL,GAAa;AACZH,MAAAA,KAAK,EAAC;AADM,KAAb;AAGF,GAPkC,CAQnC;;;AAoBAa,EAAAA,MAAM,GAAG;AACR,wBACC,oBAAC,QAAD;AACC,MAAA,eAAe,EAAE,KAAKhB,eADvB;AAEC,MAAA,cAAc,EAAE,KAAKQ,kBAFtB,CAGC;AAHD;AAIC,MAAA,MAAM,EAAC,yBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AASA;;AAtCkC;;AAyCpC,MAAMS,gBAAgB,GAAIX,KAAD,IAAW;AACnC,SAAO;AACNH,IAAAA,KAAK,EAACG,KAAK,CAACY,IAAN,CAAWf;AADX,GAAP;AAGA,CAJD;;AAMA,MAAMgB,kBAAkB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACNxB,IAAAA,eAAe,EAAEgB,KAAD,IAAWQ,QAAQ,CAACxB,eAAe,CAACgB,KAAD,CAAhB;AAD7B,GAAP;AAGA,CAJD;;AAMA,eAAejB,OAAO,CAACsB,gBAAD,EAAmBE,kBAAnB,CAAP,CAA8CtB,UAA9C,CAAf","sourcesContent":["import React, {createRef, useState, Component } from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport { addMediaToStore } from '../store/actions/MediaAction'\r\n\r\n\r\n class MyUploader extends Component {\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\t\t\tthis.state = {\r\n\t\t\t\t\tmedia:[]\r\n\t\t\t\t}\r\n\t}\r\n\t// specify upload params and url for your files\r\n\t\tgetUploadParams = ({ meta }) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tmedia : meta\r\n\t\t\t});\r\n\t\t\tconsole.log(this.state.media)\r\n\t\t\treturn { url: 'https://httpbin.org/post' } \r\n\t\t}\r\n\t\r\n\t// called every time a file's `status` changes\r\n\thandleChangeStatus = ({ meta, file }, status) => { \r\n}\r\n\t\r\n\t// receives array of files that are done uploading when submit button is clicked\r\n\thandleSubmit = (files, allFiles, e) => {\r\n\t\te.preventDefault();\r\n\t\t// allFiles.forEach(f => f.remove())\r\n\t\taddMediaToStore(files)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Dropzone\r\n\t\t\t\tgetUploadParams={this.getUploadParams}\r\n\t\t\t\tonChangeStatus={this.handleChangeStatus}\r\n\t\t\t\t// onSubmit={this.handleSubmit}\r\n\t\t\t\taccept=\"image/*,audio/*,video/*\"\r\n\t\t\t/>\r\n\t\t)\r\n\r\n\t}\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n\treturn { \r\n\t\tmedia:state.post.media\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddMediaToStore:(files) => dispatch(addMediaToStore(files))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}