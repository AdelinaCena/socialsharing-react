{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { createRef, useState, Component } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport { addMediaToStore } from '../store/actions/MediaAction';\n\nclass MyUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUploadParams = async ({\n      meta: {\n        name\n      }\n    }) => {\n      const {\n        fields,\n        uploadUrl,\n        fileUrl\n      } = await myApiService.getPresignedUploadParams(name);\n      return {\n        fields,\n        meta: {\n          fileUrl\n        },\n        url: uploadUrl\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status) => {\n      this.setState({\n        media: [file, meta]\n      });\n    };\n\n    this.handleSubmit = (files, allFiles) => {\n      // allFiles.forEach(f => f.remove())\n      this.props.addMediaToStore(allFiles);\n      console.log(this.state);\n    };\n\n    this.state = {\n      media: []\n    };\n  } // specify upload params and url for your files\n\n\n  render() {\n    const {\n      media\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: this.getUploadParams,\n      onChangeStatus: this.handleChangeStatus,\n      onSubmit: this.handleSubmit,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 4\n      }\n    });\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => dispatch(addMediaToStore(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","createRef","useState","Component","Dropzone","connect","addMediaToStore","MyUploader","constructor","props","getUploadParams","meta","name","fields","uploadUrl","fileUrl","myApiService","getPresignedUploadParams","url","handleChangeStatus","file","status","setState","media","handleSubmit","files","allFiles","console","log","state","render","mapStatesToProps","post","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAGC,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AACnCK,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;;AADD,SAOCC,eAPD,GAOmB,OAAO;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AAAR,KAAP,KAA8B;AAC9C,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBC,QAAAA;AAArB,UAAiC,MAAMC,YAAY,CAACC,wBAAb,CAAsCL,IAAtC,CAA7C;AACA,aAAO;AAAEC,QAAAA,MAAF;AAAUF,QAAAA,IAAI,EAAE;AAAEI,UAAAA;AAAF,SAAhB;AAA6BG,QAAAA,GAAG,EAAEJ;AAAlC,OAAP;AACD,KAVF;;AAAA,SAaAK,kBAbA,GAaqB,CAAC;AAAER,MAAAA,IAAF;AAAQS,MAAAA;AAAR,KAAD,EAAiBC,MAAjB,KAA4B;AAChD,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAG,CAACH,IAAD,EAAOT,IAAP;AADI,OAAd;AAGA,KAjBD;;AAAA,SAoBAa,YApBA,GAoBe,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACnC;AACA,WAAKjB,KAAL,CAAWH,eAAX,CAA2BoB,QAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,KAxBD;;AAEE,SAAKA,KAAL,GAAa;AACZN,MAAAA,KAAK,EAAC;AADM,KAAb;AAGD,GAPkC,CAQnC;;;AAoBAO,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEP,MAAAA;AAAF,QAAY,KAAKd,KAAvB;AACA,wBACC,oBAAC,QAAD;AACC,MAAA,eAAe,EAAE,KAAKC,eADvB;AAEC,MAAA,cAAc,EAAE,KAAKS,kBAFtB;AAGC,MAAA,QAAQ,EAAE,KAAKK,YAHhB;AAIC,MAAA,MAAM,EAAC,yBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAUA;;AAxCkC;;AA2CpC,MAAMO,gBAAgB,GAAIF,KAAD,IAAW;AACnC,SAAO;AACNN,IAAAA,KAAK,EAACM,KAAK,CAACG,IAAN,CAAWT;AADX,GAAP;AAGA,CAJD;;AAMA,MAAMU,kBAAkB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACN5B,IAAAA,eAAe,EAAEmB,KAAD,IAAWS,QAAQ,CAAC5B,eAAe,CAACmB,KAAD,CAAhB;AAD7B,GAAP;AAGA,CAJD;;AAMA,eAAepB,OAAO,CAAC0B,gBAAD,EAAmBE,kBAAnB,CAAP,CAA8C1B,UAA9C,CAAf","sourcesContent":["import React, {createRef, useState, Component } from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport { addMediaToStore } from '../store/actions/MediaAction'\r\n\r\n\r\n class MyUploader extends Component {\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\t\tthis.state = {\r\n\t\t\t\tmedia:[]\r\n\t\t\t}\r\n\t}\r\n\t// specify upload params and url for your files\r\n\t\tgetUploadParams = async ({ meta: { name } }) => {\r\n\t\t  const { fields, uploadUrl, fileUrl } = await myApiService.getPresignedUploadParams(name)\r\n\t\t  return { fields, meta: { fileUrl }, url: uploadUrl }\r\n\t\t}\r\n\t\r\n\t// called every time a file's `status` changes\r\n\thandleChangeStatus = ({ meta, file }, status) => { \r\n\t\tthis.setState({\r\n\t\t\t\tmedia : [file, meta]\r\n\t\t\t});\r\n\t}\r\n\t\r\n\t// receives array of files that are done uploading when submit button is clicked\r\n\thandleSubmit = (files, allFiles) => {\r\n\t\t// allFiles.forEach(f => f.remove())\r\n\t\tthis.props.addMediaToStore(allFiles)\r\n\t\tconsole.log(this.state)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { media } = this.props;\r\n\t\treturn (\r\n\t\t\t<Dropzone\r\n\t\t\t\tgetUploadParams={this.getUploadParams}\r\n\t\t\t\tonChangeStatus={this.handleChangeStatus}\r\n\t\t\t\tonSubmit={this.handleSubmit}\r\n\t\t\t\taccept=\"image/*,audio/*,video/*\"\r\n\t\t\t>\r\n\t\t\t</Dropzone>\r\n\t\t)\r\n\r\n\t}\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n\treturn { \r\n\t\tmedia:state.post.media\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddMediaToStore:(files) => dispatch(addMediaToStore(files))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}