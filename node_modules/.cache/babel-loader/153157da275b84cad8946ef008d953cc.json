{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/pages/post/create.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextField, TextareaAutosize } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { addPost } from '../../store/actions/PostAction';\nimport MyUploader from '../../components/MyUploader';\n\nclass create extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUploadParams = ({\n      meta\n    }) => {\n      this.setState({\n        media: this.state.media.concat(file)\n      });\n      return {\n        url: 'https://httpbin.org/post'\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status) => {\n      this.setState({\n        media: this.state.media.concat(file)\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const formData = new FormData();\n      Object.keys(this.state.media).forEach(file => {\n        formData.append('media', file);\n      });\n      this.setState({\n        media: formData\n      });\n      console.log(formData);\n      console.log(this.state.media);\n      debugger;\n      this.props.addPost(this.state); // this.props.history.push('/');\n    };\n\n    this.state = {\n      title: '',\n      text: '',\n      media: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  } // specify upload params and url for your files\n\n\n  render() {\n    const {\n      media\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      encType: \"multipart/form-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"email\",\n      name: \"title\",\n      type: \"text\",\n      label: \"Title\",\n      value: this.state.title,\n      fullWidth: true,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextareaAutosize, {\n      \"aria-label\": \"maximum width\",\n      name: \"text\",\n      label: \"Text\",\n      style: {\n        width: '100%',\n        marginTop: '10px'\n      },\n      rowsMin: \"10\",\n      value: this.state.text,\n      onChange: this.handleChange,\n      placeholder: \"Text here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      multiple: true,\n      name: \"files\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: this.getUploadParams,\n      onChangeStatus: this.handleChangeStatus,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginTop: '10px'\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, \"Add post\")));\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addPost: postObject => dispatch(addPost(postObject))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(create);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/pages/post/create.js"],"names":["React","Component","connect","TextField","TextareaAutosize","Button","Dropzone","addPost","MyUploader","create","constructor","props","getUploadParams","meta","setState","media","state","concat","file","url","handleChangeStatus","status","handleChange","e","target","name","value","handleSubmit","preventDefault","formData","FormData","Object","keys","forEach","append","console","log","title","text","bind","render","width","marginTop","mapStatesToProps","post","mapDispatchToProps","dispatch","postObject"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { TextField, TextareaAutosize } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\n\r\nimport { addPost } from '../../store/actions/PostAction';\r\nimport MyUploader from '../../components/MyUploader'\r\n\r\nclass create extends Component {\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            text: '',\r\n            media: []\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    // specify upload params and url for your files\r\n    getUploadParams = ({ meta }) => {\r\n        this.setState({\r\n            media : this.state.media.concat(file)\r\n        });\r\n        return { url: 'https://httpbin.org/post' } \r\n    }\r\n    \r\n    // called every time a file's `status` changes\r\n    handleChangeStatus = ({ meta, file }, status) => { \r\n        this.setState({\r\n            media : this.state.media.concat(file)\r\n        });\r\n    }\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\t[e.target.name] :e.target.value,\r\n\t\t});\r\n    }\r\n\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        const formData = new FormData()\r\n        Object.keys(this.state.media).forEach((file) => {\r\n            formData.append('media', file);\r\n          });\r\n\r\n        this.setState({\r\n            media: formData\r\n        })\r\n\r\n        console.log(formData); \r\n        console.log(this.state.media);\r\n        debugger;\r\n\r\n        this.props.addPost(this.state);\r\n\r\n        // this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const { media } = this.props\r\n\t    return (\r\n            <>\r\n            <form noValidate autoComplete=\"off\" encType=\"multipart/form-data\">\r\n                <TextField \r\n                    id=\"email\" name=\"title\" type=\"text\" \r\n                    label=\"Title\"\r\n                    value={this.state.title} \r\n                    fullWidth \r\n                    onChange={this.handleChange}/>\r\n                <TextareaAutosize \r\n                    aria-label=\"maximum width\" \r\n                    name=\"text\" \r\n                    label=\"Text\"\r\n                    style={{width: '100%', marginTop:'10px'}}\r\n                    rowsMin=\"10\"\r\n                    value={this.state.text}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Text here\" />\r\n\r\n                <input type=\"file\" multiple name=\"files\" onChange={this.handleChange}/>\r\n\r\n                <Dropzone\r\n                    getUploadParams={this.getUploadParams}\r\n                    onChangeStatus={this.handleChangeStatus}\r\n                    accept=\"image/*,audio/*,video/*\"\r\n                />\r\n\r\n                <Button  \r\n                    style={{marginTop: '10px'}} variant=\"contained\" \r\n                    color=\"primary\" onClick={this.handleSubmit}>\r\n                    Add post\r\n                </Button>\r\n            </form>\r\n            </>\r\n        );\r\n\t}\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n\treturn {\r\n        media:state.post.media\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddPost:(postObject) => dispatch(addPost(postObject))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(create)"]},"metadata":{},"sourceType":"module"}