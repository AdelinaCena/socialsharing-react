{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { createRef, useState, Component } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport { addMediaToStore } from '../store/actions/MediaAction';\n\nclass MyUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUploadParams = ({\n      meta\n    }) => {\n      return {\n        url: 'https://httpbin.org/post'\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status) => {\n      console.log(this.state.media_files);\n    };\n\n    this.handleSubmit = (files, allFiles) => {\n      this.setState({\n        media_files: allFiles\n      });\n      addMediaToStore(allFiles);\n    };\n\n    this.state = {\n      media_files: []\n    };\n  } // specify upload params and url for your files\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: this.getUploadParams,\n      onChangeStatus: this.handleChangeStatus,\n      onSubmit: this.handleSubmit,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => dispatch(addMediaToStore(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","createRef","useState","Component","Dropzone","connect","addMediaToStore","MyUploader","constructor","props","getUploadParams","meta","url","handleChangeStatus","file","status","console","log","state","media_files","handleSubmit","files","allFiles","setState","render","mapStatesToProps","media","post","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AACjCK,EAAAA,WAAW,CAACC,KAAD,EACX;AACE,UAAMA,KAAN;;AADF,SAOAC,eAPA,GAOkB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAAE,aAAO;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAAP;AAA4C,KAP9E;;AAAA,SAUAC,kBAVA,GAUqB,CAAC;AAAEF,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAD,EAAiBC,MAAjB,KAA4B;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,WAAvB;AACH,KAZC;;AAAA,SAeAC,YAfA,GAee,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClC,WAAKC,QAAL,CAAc;AACZJ,QAAAA,WAAW,EAAEG;AADD,OAAd;AAGAhB,MAAAA,eAAe,CAACgB,QAAD,CAAf;AACD,KApBD;;AAEM,SAAKJ,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAG;AADH,KAAb;AAGL,GAPgC,CAQjC;;;AAgBAK,EAAAA,MAAM,GAAG;AACL,wBACE,oBAAC,QAAD;AACE,MAAA,eAAe,EAAE,KAAKd,eADxB;AAEE,MAAA,cAAc,EAAE,KAAKG,kBAFvB;AAGE,MAAA,QAAQ,EAAE,KAAKO,YAHjB;AAIE,MAAA,MAAM,EAAC,yBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQH;;AAjCgC;;AAoCnC,MAAMK,gBAAgB,GAAIP,KAAD,IAAW;AAClC,SAAO;AACLQ,IAAAA,KAAK,EAACR,KAAK,CAACS,IAAN,CAAWD;AADZ,GAAP;AAGD,CAJD;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLvB,IAAAA,eAAe,EAAEe,KAAD,IAAWQ,QAAQ,CAACvB,eAAe,CAACe,KAAD,CAAhB;AAD9B,GAAP;AAGD,CAJD;;AAMA,eAAehB,OAAO,CAACoB,gBAAD,EAAmBG,kBAAnB,CAAP,CAA8CrB,UAA9C,CAAf","sourcesContent":["import React, { createRef, useState, Component } from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport { addMediaToStore } from '../store/actions/MediaAction'\r\n\r\nclass MyUploader extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n        this.state = {\r\n          media_files : [],\r\n        }\r\n  }\r\n  // specify upload params and url for your files\r\n  getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\r\n  \r\n  // called every time a file's `status` changes\r\n  handleChangeStatus = ({ meta, file }, status) => { \r\n    console.log(this.state.media_files)\r\n}\r\n  \r\n  // receives array of files that are done uploading when submit button is clicked\r\n  handleSubmit = (files, allFiles) => {\r\n    this.setState({\r\n      media_files :allFiles \r\n    });\r\n    addMediaToStore(allFiles)\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <Dropzone\r\n          getUploadParams={this.getUploadParams}\r\n          onChangeStatus={this.handleChangeStatus}\r\n          onSubmit={this.handleSubmit}\r\n          accept=\"image/*,audio/*,video/*\"\r\n        />\r\n      )\r\n  }\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n  return { \r\n    media:state.post.media\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMediaToStore:(files) => dispatch(addMediaToStore(files))\r\n  }\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}