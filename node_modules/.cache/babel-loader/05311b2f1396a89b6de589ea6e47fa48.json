{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { Fragment, useState, Component } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport { addMediaToStore } from '../store/actions/MediaAction';\n\nclass MyUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUploadParams = ({\n      meta\n    }) => {\n      console.log(this.state.media);\n      return {\n        url: 'https://httpbin.org/post'\n      };\n    };\n\n    this.handleChangeStatus = ({\n      meta,\n      file\n    }, status) => {\n      this.setState({\n        media: file\n      });\n    };\n\n    this.handleSubmit = (files, allFiles) => {\n      // allFiles.forEach(f => f.remove())\n      this.props.addMediaToStore(this.state);\n      console.log(this.state);\n    };\n\n    this.state = {\n      images: []\n    };\n  } // specify upload params and url for your files\n\n\n  render() {\n    const {\n      media\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uploader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Dropzone, {\n      className: \"btn btn-dark\",\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, \"Select Images\"), this.state.images.length > 0 && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-dark uploadBtn\",\n      onClick: this.uploadFiles.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }\n    }, \"Upload\")), this.state.images.length ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, this.state.uploading && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      style: {\n        width: this.state.progress\n      },\n      \"aria-valuenow\": this.state.progress,\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"images\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, this.state.images.map(file => /*#__PURE__*/React.createElement(\"div\", {\n      key: file.preview,\n      className: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"close\",\n      onClick: this.removeDroppedFile.bind(this, file.preview),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 41\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: file.preview,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 41\n      }\n    }))))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-images\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, \"Selected images will appear here\")));\n  }\n\n}\n\nconst mapStatesToProps = state => {\n  return {\n    media: state.post.media\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => dispatch(addMediaToStore(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","Fragment","useState","Component","Dropzone","connect","addMediaToStore","MyUploader","constructor","props","getUploadParams","meta","console","log","state","media","url","handleChangeStatus","file","status","setState","handleSubmit","files","allFiles","images","render","length","uploadFiles","bind","uploading","width","progress","map","preview","removeDroppedFile","mapStatesToProps","post","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, Component } from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport { addMediaToStore } from '../store/actions/MediaAction'\r\n\r\n\r\n class MyUploader extends Component {\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\t\tthis.state = {\r\n\t\t\t\timages:[]\r\n\t\t\t}\r\n\t}\r\n\t// specify upload params and url for your files\r\n\t\tgetUploadParams = ({ meta }) => {\r\n\t\t\tconsole.log(this.state.media)\r\n\t\t\treturn { url: 'https://httpbin.org/post' } \r\n\t\t}\r\n\t\r\n\t// called every time a file's `status` changes\r\n\thandleChangeStatus = ({ meta, file }, status) => { \r\n\t\tthis.setState({\r\n\t\t\tmedia : file\r\n\t\t});\r\n\t}\r\n\t\r\n\t// receives array of files that are done uploading when submit button is clicked\r\n\thandleSubmit = (files, allFiles) => {\r\n\t\t// allFiles.forEach(f => f.remove())\r\n\t\tthis.props.addMediaToStore(this.state)\r\n\t\tconsole.log(this.state)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { media } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"uploader\">\r\n                <div className=\"text-center\">\r\n                    <Dropzone\r\n                        className=\"btn btn-dark\"\r\n                        accept=\"image/*,audio/*,video/*\"\r\n                    >\r\n                        Select Images\r\n                    </Dropzone>\r\n\r\n                    {this.state.images.length > 0 &&\r\n                        <button\r\n                            className=\"btn btn-dark uploadBtn\"\r\n                            onClick={this.uploadFiles.bind(this)}\r\n                        >\r\n                            Upload\r\n                        </button>\r\n                    }\r\n\r\n                </div>\r\n\r\n                {this.state.images.length ?\r\n                    <Fragment>\r\n                        {this.state.uploading &&\r\n                            <div className=\"progress\">\r\n                                <div\r\n                                    className=\"progress-bar\"\r\n                                    role=\"progressbar\"\r\n                                    style={{width : this.state.progress}}\r\n                                    aria-valuenow={this.state.progress}\r\n                                    aria-valuemin=\"0\"\r\n                                    aria-valuemax=\"100\"/>\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"images\">\r\n                            {\r\n                                this.state.images.map((file) =>\r\n                                    <div key={file.preview} className=\"image\">\r\n                                        <span\r\n                                            className=\"close\"\r\n                                            onClick={this.removeDroppedFile.bind(this, file.preview)}\r\n                                        >X</span>\r\n                                        <img src={file.preview} alt=\"\"/>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </Fragment>\r\n                    :\r\n                    <div className=\"no-images\">\r\n                        <h5 className=\"text-center\">\r\n                            Selected images will appear here\r\n                        </h5>\r\n                    </div>\r\n                }\r\n            </div>\r\n\t\t)\r\n\r\n\t}\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n\treturn { \r\n\t\tmedia:state.post.media\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddMediaToStore:(files) => dispatch(addMediaToStore(files))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}