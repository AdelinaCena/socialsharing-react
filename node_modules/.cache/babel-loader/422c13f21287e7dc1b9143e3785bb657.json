{"ast":null,"code":"var _jsxFileName = \"/var/www/html/socialsharing/src/components/MyUploader.js\";\nimport React, { createRef } from 'react';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from 'react-redux';\nimport addMediaToStore from '../actions/MediaAction';\n\nfunction MyUploader() {\n  const media_files = []; // specify upload params and url for your files\n\n  const getUploadParams = ({\n    meta\n  }) => {\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  }; // called every time a file's `status` changes\n\n\n  const handleChangeStatus = ({\n    meta,\n    file\n  }, status) => {\n    if (status == 'done') {}\n  }; // receives array of files that are done uploading when submit button is clicked\n\n\n  const handleSubmit = (files, allFiles) => {\n    this.media_files = files;\n    console.log(files.map(f => f.meta));\n    allFiles.forEach(f => f.remove());\n  };\n\n  return /*#__PURE__*/React.createElement(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus,\n    onSubmit: handleSubmit,\n    accept: \"image/*,audio/*,video/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  });\n}\n\nconst mapStatesToProps = state => {\n  return {\n    authResponse: state.auth.authResponse\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMediaToStore: files => addMediaToStore(signUp(files))\n  };\n};\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader);","map":{"version":3,"sources":["/var/www/html/socialsharing/src/components/MyUploader.js"],"names":["React","createRef","Dropzone","connect","addMediaToStore","MyUploader","media_files","getUploadParams","meta","url","handleChangeStatus","file","status","handleSubmit","files","allFiles","console","log","map","f","forEach","remove","mapStatesToProps","state","authResponse","auth","mapDispatchToProps","dispatch","signUp"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;;AACC,SAASC,UAAT,GAAuB;AACtB,QAAMC,WAAW,GAAG,EAApB,CADsB,CAEtB;;AACA,QAAMC,eAAe,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAAE,WAAO;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAP;AAA4C,GAApF,CAHsB,CAKtB;;;AACA,QAAMC,kBAAkB,GAAG,CAAC;AAAEF,IAAAA,IAAF;AAAQG,IAAAA;AAAR,GAAD,EAAiBC,MAAjB,KAA4B;AACrD,QAAIA,MAAM,IAAI,MAAd,EAAsB,CAErB;AACJ,GAJC,CANsB,CAYtB;;;AACA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC,SAAKT,WAAL,GAAmBQ,KAAnB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACX,IAAjB,CAAZ;AACAO,IAAAA,QAAQ,CAACK,OAAT,CAAiBD,CAAC,IAAIA,CAAC,CAACE,MAAF,EAAtB;AACD,GAJD;;AAMA,sBACE,oBAAC,QAAD;AACE,IAAA,eAAe,EAAEd,eADnB;AAEE,IAAA,cAAc,EAAEG,kBAFlB;AAGE,IAAA,QAAQ,EAAEG,YAHZ;AAIE,IAAA,MAAM,EAAC,yBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD;;AAED,MAAMS,gBAAgB,GAAIC,KAAD,IAAW;AAClC,SAAO;AACLC,IAAAA,YAAY,EAACD,KAAK,CAACE,IAAN,CAAWD;AADnB,GAAP;AAGD,CAJD;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLvB,IAAAA,eAAe,EAAEU,KAAD,IAAWV,eAAe,CAACwB,MAAM,CAACd,KAAD,CAAP;AADrC,GAAP;AAGD,CAJD;;AAMA,eAAeX,OAAO,CAACmB,gBAAD,EAAmBI,kBAAnB,CAAP,CAA8CrB,UAA9C,CAAf","sourcesContent":["import React, {createRef} from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport { connect } from 'react-redux'\r\nimport addMediaToStore from '../actions/MediaAction'\r\n function MyUploader () {\r\n  const media_files = [];\r\n  // specify upload params and url for your files\r\n  const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\r\n  \r\n  // called every time a file's `status` changes\r\n  const handleChangeStatus = ({ meta, file }, status) => { \r\n    if (status == 'done') {\r\n        \r\n    }\r\n}\r\n  \r\n  // receives array of files that are done uploading when submit button is clicked\r\n  const handleSubmit = (files, allFiles) => {\r\n    this.media_files = files;\r\n    console.log(files.map(f => f.meta))\r\n    allFiles.forEach(f => f.remove())\r\n  }\r\n\r\n  return (\r\n    <Dropzone\r\n      getUploadParams={getUploadParams}\r\n      onChangeStatus={handleChangeStatus}\r\n      onSubmit={handleSubmit}\r\n      accept=\"image/*,audio/*,video/*\"\r\n    />\r\n  )\r\n}\r\n\r\nconst mapStatesToProps = (state) => {\r\n  return { \r\n    authResponse:state.auth.authResponse\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMediaToStore:(files) => addMediaToStore(signUp(files))\r\n  }\r\n}\r\n\r\nexport default connect(mapStatesToProps, mapDispatchToProps)(MyUploader)\r\n"]},"metadata":{},"sourceType":"module"}