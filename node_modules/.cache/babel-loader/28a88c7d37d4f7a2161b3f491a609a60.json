{"ast":null,"code":"import HttpService from './HttpService';\nexport const AllPosts = () => {\n  const http = new HttpService();\n  return http.getData('posts').then(data => {\n    return data;\n  }).catch(error => console.log(error));\n};\nexport const CreatePost = async post => {\n  const http = new HttpService();\n  console.log(post);\n  const formdata = new FormData();\n  formdata.append(post.media, post.filename);\n  const token = await localStorage.getItem('user');\n  let requestOptions = {\n    method: 'POST',\n    headers: {\n      'Authorization': token,\n      'Content-Type': '*/*'\n    },\n    body: post\n  };\n  return fetch(\"http://localhost:8000/api/posts\", requestOptions).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const GetSinglePost = postId => {\n  const http = new HttpService();\n  return http.getData('posts/' + postId).then(data => {\n    return data;\n  }).catch(error => console.log(error));\n};\nexport const UpdatePost = (post, postId) => {\n  const http = new HttpService();\n  return http.postData(post, 'posts/' + postId, 'PUT').then(data => {\n    return data;\n  }).catch(error => console.log(error));\n};","map":{"version":3,"sources":["/var/www/html/socialsharing/src/store/services/PostService.js"],"names":["HttpService","AllPosts","http","getData","then","data","catch","error","console","log","CreatePost","post","formdata","FormData","append","media","filename","token","localStorage","getItem","requestOptions","method","headers","body","fetch","response","json","GetSinglePost","postId","UpdatePost","postData"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC7B,QAAMC,IAAI,GAAG,IAAIF,WAAJ,EAAb;AACA,SAAOE,IAAI,CAACC,OAAL,CAAa,OAAb,EAAsBC,IAAtB,CAA2BC,IAAI,IAAI;AACzC,WAAOA,IAAP;AACA,GAFM,EAEJC,KAFI,CAEEC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFX,CAAP;AAGA,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,MAAMC,IAAN,IAAe;AACxC,QAAMT,IAAI,GAAG,IAAIF,WAAJ,EAAb;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgBH,IAAI,CAACI,KAArB,EAA4BJ,IAAI,CAACK,QAAjC;AACA,QAAMC,KAAK,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAApB;AACI,MAAIC,cAAc,GAAG;AACpBC,IAAAA,MAAM,EAAE,MADY;AAEpBC,IAAAA,OAAO,EAAC;AACP,uBAAiBL,KADV;AAEP,sBAAgB;AAFT,KAFY;AAMpBM,IAAAA,IAAI,EAAEZ;AANc,GAArB;AASA,SAAOa,KAAK,CAAC,iCAAD,EAAoCJ,cAApC,CAAL,CAAyDhB,IAAzD,CACAqB,QAAQ,IAAI;AACR,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAHD,EAGGpB,KAHH,CAGSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAHlB,CAAP;AAIJ,CAnBM;AAqBP,OAAO,MAAMoB,aAAa,GAAIC,MAAD,IAAY;AACxC,QAAM1B,IAAI,GAAG,IAAIF,WAAJ,EAAb;AAEA,SAAOE,IAAI,CAACC,OAAL,CAAa,WAASyB,MAAtB,EAA8BxB,IAA9B,CAAmCC,IAAI,IAAI;AACjD,WAAOA,IAAP;AACA,GAFM,EAEJC,KAFI,CAEEC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFX,CAAP;AAGA,CANM;AAQP,OAAO,MAAMsB,UAAU,GAAG,CAAClB,IAAD,EAAOiB,MAAP,KAAkB;AAC3C,QAAM1B,IAAI,GAAG,IAAIF,WAAJ,EAAb;AAEA,SAAOE,IAAI,CAAC4B,QAAL,CAAcnB,IAAd,EAAoB,WAASiB,MAA7B,EAAqC,KAArC,EAA4CxB,IAA5C,CAAiDC,IAAI,IAAI;AAC/D,WAAOA,IAAP;AACA,GAFM,EAEJC,KAFI,CAEEC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFX,CAAP;AAGA,CANM","sourcesContent":["import HttpService from './HttpService';\n\nexport const AllPosts = () => {\n\tconst http = new HttpService();\n\treturn http.getData('posts').then(data => {\n\t\treturn data;\n\t}).catch(error => console.log(error));\n}\n\nexport const CreatePost = async(post) => {\n\tconst http = new HttpService();\n\tconsole.log(post)\n\tconst formdata = new FormData()\n\tformdata.append(post.media, post.filename)\n\tconst token = await localStorage.getItem('user');\n    \tlet requestOptions = {\n    \t\tmethod: 'POST',\n    \t\theaders:{\n    \t\t\t'Authorization': token,\n    \t\t\t'Content-Type': '*/*',\n    \t\t},\n    \t\tbody: post\n    \t}\n\n    \treturn fetch(\"http://localhost:8000/api/posts\", requestOptions).then(\n            response => {\n                return response.json()\n            }).catch(error => console.log(error));\n}\n\nexport const GetSinglePost = (postId) => {\n\tconst http = new HttpService();\n\t\n\treturn http.getData('posts/'+postId).then(data => {\n\t\treturn data;\n\t}).catch(error => console.log(error));\n}\n\nexport const UpdatePost = (post, postId) => {\n\tconst http = new HttpService();\n\t\n\treturn http.postData(post, 'posts/'+postId, 'PUT').then(data => {\n\t\treturn data;\n\t}).catch(error => console.log(error));\n}"]},"metadata":{},"sourceType":"module"}